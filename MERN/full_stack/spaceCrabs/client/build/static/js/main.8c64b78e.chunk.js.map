{"version":3,"sources":["views/Main.jsx","components/CrabForm.jsx","views/New.jsx","views/Show.jsx","views/Edit.jsx","App.js","serviceWorker.js","index.js"],"names":["Main","useState","crabs","setCrabs","useEffect","axios","get","then","res","data","results","catch","err","console","log","className","map","c","i","key","name","spaceShip","to","_id","CrabForm","props","inputs","errors","handleInputChange","handleSubmit","submitValue","onSubmit","htmlFor","class","type","value","onChange","placeholder","message","weaponOne","weaponTwo","weaponThree","New","initialCrab","crab","setCrab","setErrors","e","target","preventDefault","post","navigate","Show","id","onClick","delete","Edit","edit","setEdit","put","App","data-toggle","data-target","aria-controls","aria-expanded","aria-label","path","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error"],"mappings":"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","file":"static/js/main.8c64b78e.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { Link } from '@reach/router';\nimport axios from 'axios';\n\nconst Main = () => {\n    const [crabs, setCrabs] = useState([]);\n\n    useEffect(() => {\n        axios\n            .get('http://localhost:8000/api/crabs')\n            .then((res) => setCrabs(res.data.results))\n            .catch((err) => console.log(err));\n    }, []);\n\n    return (\n        <div>\n            <h1 className=\"mb-5\">All Space Crabs:</h1>\n            <table className=\"table table-dark col-8 mx-auto\">\n                <thead>\n                    <tr>\n                        <th>Name</th>\n                        <th>Spaceship</th>\n                        <th>Actions</th>\n                    </tr>\n                </thead>\n                <tbody>\n                    {crabs.map((c, i) => {\n                        return (\n                            <tr key={i}>\n                                <td className=\"vertical-align-center\">\n                                    {c.name}\n                                </td>\n                                <td className=\"vertical-align-center\">\n                                    {c.spaceShip}\n                                </td>\n                                <td>\n                                    <Link\n                                        to={`/edit/${c._id}`}\n                                        className=\"btn-sm btn-outline-warning mr-2\"\n                                    >\n                                        Edit\n                                    </Link>\n                                    <Link\n                                        to={`/crab/${c._id}`}\n                                        className=\"btn-sm btn-warning\"\n                                    >\n                                        Show\n                                    </Link>\n                                </td>\n                            </tr>\n                        );\n                    })}\n                </tbody>\n            </table>\n        </div>\n    );\n};\n\nexport default Main;\n","import React from 'react';\n\nconst CrabForm = (props) => {\n    const {\n        inputs,\n        errors,\n        handleInputChange,\n        handleSubmit,\n        submitValue,\n    } = props;\n\n    return (\n        <form className=\"col-5 mx-auto\" onSubmit={handleSubmit}>\n            <div className=\"form-group row\">\n                <label\n                    className=\"col-sm-3 col-form-label text-left\"\n                    htmlFor=\"name\"\n                >\n                    Name:\n                </label>\n                <div class=\"col-sm-9\">\n                    <input\n                        type=\"text\"\n                        name=\"name\"\n                        value={inputs.name}\n                        onChange={handleInputChange}\n                        className=\"form-control\"\n                        placeholder=\"ex/ Han Solo\"\n                    />\n                </div>\n                <span className=\"text-danger\">\n                    {errors.name.message ? errors.name.message : ''}\n                </span>\n            </div>\n            <div className=\"form-group row\">\n                <label\n                    className=\"col-sm-3 col-form-label text-left\"\n                    htmlFor=\"spaceShip\"\n                >\n                    Space Ship:\n                </label>\n                <div className=\"col-sm-9\">\n                    <input\n                        type=\"text\"\n                        name=\"spaceShip\"\n                        value={inputs.spaceShip}\n                        onChange={handleInputChange}\n                        className=\"form-control\"\n                        placeholder=\"ex/ Millennium Falcon\"\n                    />\n                </div>\n                <span className=\"text-danger\">\n                    {errors.name.message ? errors.name.message : ''}\n                </span>\n            </div>\n            <div className=\"form-group row\">\n                <label\n                    className=\"col-sm-3 col-form-label text-left\"\n                    htmlFor=\"weaponOne\"\n                >\n                    Weapon One:\n                </label>\n                <div className=\"col-sm-9\">\n                    <input\n                        type=\"text\"\n                        name=\"weaponOne\"\n                        value={inputs.weaponOne}\n                        onChange={handleInputChange}\n                        className=\"form-control\"\n                        placeholder=\"(optional)\"\n                    />\n                </div>\n            </div>\n            <div className=\"form-group row\">\n                <label\n                    className=\"col-sm-3 col-form-label text-left\"\n                    htmlFor=\"weaponTwo\"\n                >\n                    Weapon Two:\n                </label>\n                <div className=\"col-sm-9\">\n                    <input\n                        type=\"text\"\n                        name=\"weaponTwo\"\n                        value={inputs.weaponTwo}\n                        onChange={handleInputChange}\n                        className=\"form-control\"\n                        placeholder=\"(optional)\"\n                    />\n                </div>\n            </div>\n            <div className=\"form-group row\">\n                <label\n                    className=\"col-sm-3 col-form-label text-left\"\n                    htmlFor=\"weaponThree\"\n                >\n                    Weapon Three:\n                </label>\n                <div className=\"col-sm-9\">\n                    <input\n                        type=\"text\"\n                        name=\"weaponThree\"\n                        value={inputs.weaponThree}\n                        onChange={handleInputChange}\n                        className=\"form-control\"\n                        placeholder=\"(optional)\"\n                    />\n                </div>\n            </div>\n            <input\n                type=\"submit\"\n                value={submitValue}\n                className=\"btn btn-warning my-5\"\n            />\n        </form>\n    );\n};\n\nexport default CrabForm;\n","import React, { useState } from 'react';\nimport axios from 'axios';\n\nimport CrabForm from '../components/CrabForm';\nimport { navigate } from '@reach/router';\n\nconst New = (props) => {\n    const initialCrab = {\n        name: '',\n        spaceShip: '',\n        weaponOne: '',\n        weaponTwo: '',\n        weaponThree: '',\n    };\n\n    const [crab, setCrab] = useState(initialCrab);\n\n    const [errors, setErrors] = useState(initialCrab);\n\n    const handleInputChange = (e) => {\n        setCrab({\n            ...crab,\n            [e.target.name]: e.target.value,\n        });\n    };\n\n    const handleSubmit = (e) => {\n        setErrors(initialCrab);\n        e.preventDefault();\n        axios\n            .post('http://localhost:8000/api/create/crab', crab)\n            .then((res) => {\n                if (res.data.results) {\n                    navigate('/');\n                } else {\n                    setErrors(res.data);\n                }\n            })\n            .catch((err) => console.log(err));\n    };\n\n    return (\n        <div>\n            <h2 className=\"mb-5\">Create a Crab</h2>\n            <CrabForm\n                inputs={crab}\n                errors={errors}\n                handleInputChange={handleInputChange}\n                handleSubmit={handleSubmit}\n                submitValue=\"Create a Crab\"\n            />\n        </div>\n    );\n};\n\nexport default New;\n","import React, { useState, useEffect } from 'react';\nimport { navigate } from '@reach/router';\nimport axios from 'axios';\n\nconst Show = (props) => {\n    const [crab, setCrab] = useState({\n        name: '',\n        spaceShip: '',\n        weaponOne: '',\n        weaponTwo: '',\n        weaponThree: '',\n    });\n\n    useEffect(() => {\n        axios\n            .get(`http://localhost:8000/api/crab/${props.id}`)\n            .then((res) => setCrab(res.data.results))\n            .catch((err) => console.log(err));\n    }, [props]);\n\n    const destroyCrab = () => {\n        axios\n            .delete(`http://localhost:8000/api/destroy/crab/${props.id}`)\n            .then((res) => navigate('/'))\n            .catch((err) => console.log(err));\n    };\n\n    return (\n        <div className=\"mx-auto p-5 col-6 bg-dark text-warning\">\n            <h2>{crab.name}</h2>\n            <p className=\"text-light mb-4\">Spaceship: {crab.spaceShip}</p>\n            <h3>Weapons:</h3>\n            <p className=\"text-light\">{crab.weaponOne}</p>\n            <p className=\"text-light\">{crab.weaponTwo}</p>\n            <p className=\"text-light\">{crab.weaponThree}</p>\n            <button\n                className=\"btn btn-danger btn-outline-light m-5\"\n                onClick={destroyCrab}\n            >\n                Destroy {crab.name}\n            </button>\n        </div>\n    );\n};\n\nexport default Show;\n","import React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport { navigate } from '@reach/router';\n\nimport CrabForm from '../components/CrabForm';\n\nconst Edit = (props) => {\n    const initialCrab = {\n        name: '',\n        spaceShip: '',\n        weaponOne: '',\n        weaponTwo: '',\n        weaponThree: '',\n    };\n\n    const [edit, setEdit] = useState(initialCrab);\n\n    const [errors, setErrors] = useState(initialCrab);\n\n    useEffect(() => {\n        axios\n            .get(`http://localhost:8000/api/crab/${props.id}`)\n            .then((res) => setEdit(res.data.results))\n            .catch((err) => console.log(err));\n    }, [props]);\n\n    const handleInputChange = (e) => {\n        setEdit({\n            ...edit,\n            [e.target.name]: e.target.value,\n        });\n    };\n\n    const handleSubmit = (e) => {\n        setErrors(initialCrab);\n        e.preventDefault();\n        axios\n            .put(`http://localhost:8000/api/update/crab/${props.id}`, edit)\n            .then((res) => {\n                if (res.data.results) {\n                    navigate(`/crab/${props.id}`);\n                } else {\n                    setErrors(res.data);\n                }\n            })\n            .catch((err) => console.log(err));\n    };\n\n    return (\n        <div>\n            <h2>Edit Crab:</h2>\n            <CrabForm\n                inputs={edit}\n                errors={errors}\n                handleInputChange={handleInputChange}\n                handleSubmit={handleSubmit}\n                submitValue=\"Edit Crab\"\n            />\n        </div>\n    );\n};\n\nexport default Edit;\n","import React from 'react';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './App.css';\n\nimport { Router, Link } from '@reach/router';\nimport Main from './views/Main';\nimport New from './views/New';\nimport Show from './views/Show';\nimport Edit from './views/Edit';\n\nfunction App() {\n    return (\n        <div className=\"App\">\n            <nav class=\"navbar navbar-expand-lg navbar-dark bg-dark mb-5\">\n                <Link class=\"navbar-brand text-warning\" to=\"/\">\n                    Space Crabs\n                </Link>\n                <button\n                    class=\"navbar-toggler\"\n                    type=\"button\"\n                    data-toggle=\"collapse\"\n                    data-target=\"#navbarSupportedContent\"\n                    aria-controls=\"navbarSupportedContent\"\n                    aria-expanded=\"false\"\n                    aria-label=\"Toggle navigation\"\n                >\n                    <span class=\"navbar-toggler-icon\"></span>\n                </button>\n\n                <div\n                    class=\"collapse navbar-collapse\"\n                    id=\"navbarSupportedContent\"\n                >\n                    <ul class=\"navbar-nav mr-auto\">\n                        <li class=\"nav-item active\">\n                            <Link class=\"nav-link\" to=\"/\">\n                                Home <span class=\"sr-only\">(current)</span>\n                            </Link>\n                        </li>\n                        <li class=\"nav-item\">\n                            <Link class=\"nav-link\" to=\"/new\">\n                                Create\n                            </Link>\n                        </li>\n                    </ul>\n                </div>\n            </nav>\n\n            <Router>\n                <Main path=\"/\" />\n                <New path=\"/new\" />\n                <Show path=\"/crab/:id\" />\n                <Edit path=\"/edit/:id\" />\n            </Router>\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}